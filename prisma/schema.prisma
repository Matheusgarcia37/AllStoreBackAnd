generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String      @id @default(cuid())
  name        String      @unique
  User        User[]
  typeOfStore typeOfStore
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Theme       Theme?
  about       String   @db.VarChar(3000)       
  Address     Address[]
  Contact     Contact[]
  Product     Product[]
  Upload      Upload?     @relation(fields: [uploadId], references: [id])
  uploadId    String?     @unique

  Tag Tag[]

}

model Address {
  id        String   @id @default(cuid())
  main      Boolean  @default(false)
  street    String
  city      String
  state     String
  number    String
  zip       String
  Store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime
  storeId   String
}

model Contact {
  id        String   @id @default(cuid())
  main      Boolean  @default(false)
  email     String
  phone     String
  Store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime
  storeId   String
}

model Theme {
  id             String   @id @default(cuid())
  primaryColor   String
  secondaryColor String
  storeId        String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Store          Store?   @relation(fields: [storeId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal? @default(0)
  featured    Boolean  @default(false)
  Store       Store    @relation(fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  storeId     String
  Tag         Tag[]
  Upload      Upload[]
}

model Upload {
  id        String   @id @default(cuid())
  name      String
  key       String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Produto   Product? @relation(fields: [produtoId], references: [id])
  produtoId String?
  Store     Store?

}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  Product   Product[]
  Store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
}

model User {
  id         String     @id @default(cuid())
  username   String     @unique
  email      String     @unique
  password   String
  storeId    String?    @unique
  typeOfUser typeOfUser
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  Store      Store?     @relation(fields: [storeId], references: [id])
}

enum typeOfStore {
  serviceSale
  saleOfProducts
  showcase
}

enum typeOfUser {
  admin
  user
}
